/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.northeastern.cs5500.delivery.controller;

import static com.google.common.truth.Truth.assertThat;
import static com.google.common.truth.Truth.assertWithMessage;
import static org.junit.Assert.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

import edu.northeastern.cs5500.delivery.model.FoodItem;
import edu.northeastern.cs5500.delivery.model.Restaurant;
import edu.northeastern.cs5500.delivery.repository.InMemoryRepository;

import java.util.ArrayList;
import java.util.HashMap;
import org.bson.types.ObjectId;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class RestaurantControllerTest {
    Restaurant testRestaurant1 = new Restaurant();
    Restaurant testRestaurant2 = new Restaurant();
    Restaurant testRestaurant3 = new Restaurant();

    @BeforeEach
    public void init() {
        testRestaurant1.setRestaurantName("Best Calzones!");
        testRestaurant1.setRestaurantDescription("Best taste from Italy!");
        ArrayList<ObjectId> testRestaurant1Menu = new ArrayList<>();
        FoodItem testFood1 = new FoodItem();
        testFood1.setFoodItem("Pepperoni Calzone");
        testFood1.setFoodPrice(1199);
        FoodItem testFood2 = new FoodItem();
        testFood2.setFoodItem("Cheese Spinach Calzone");
        testFood2.setFoodPrice(1099);
        testRestaurant1Menu.add(testFood1.getId());
        testRestaurant1Menu.add(testFood2.getId());
        testRestaurant1.setRestaurantMenu(testRestaurant1Menu);
        testRestaurant1.setIsActive(true);

        testRestaurant2.setRestaurantName("Taj Mahal Indian");
        testRestaurant2.setRestaurantDescription("Best Indian food!");
        ArrayList<ObjectId> testRestaurant2Menu = new ArrayList<>();
        FoodItem testFood3 = new FoodItem();
        testFood3.setFoodItem("Vegetarian meal");
        testFood3.setFoodPrice(1199);
        FoodItem testFood4 = new FoodItem();
        testFood4.setFoodItem("Chicken meal");
        testFood4.setFoodPrice(1299);
        testRestaurant2Menu.add(testFood3.getId());
        testRestaurant2Menu.add(testFood4.getId());
        testRestaurant2.setRestaurantMenu(testRestaurant2Menu);
        testRestaurant2.setIsActive(true);

        testRestaurant3.setRestaurantName("Ethiopean Best");
        testRestaurant3.setRestaurantDescription("Best Doro wat!");
        ArrayList<ObjectId> testRestaurant3Menu = new ArrayList<>();
        FoodItem testFood5 = new FoodItem();
        testFood5.setFoodItem("Beef meal");
        testFood5.setFoodPrice(1399);
        FoodItem testFood6 = new FoodItem();
        testFood6.setFoodItem("Fish meal");
        testFood6.setFoodPrice(1499);
        testRestaurant3Menu.add(testFood5.getId());
        testRestaurant3Menu.add(testFood6.getId());
        testRestaurant3.setRestaurantMenu(testRestaurant3Menu);
        testRestaurant3.setIsActive(true);
    }

    @Test
    void testRegisterCreatesRestaurants() {
        RestaurantController restaurantController =
                new RestaurantController(new InMemoryRepository<Restaurant>());
        assertThat(restaurantController.getRestaurants()).isNotEmpty();
    }

    @Test
    void testRegisterCreatesValidRestaurants() {
        RestaurantController restaurantController =
                new RestaurantController(new InMemoryRepository<Restaurant>());

        for (Restaurant restaurant : restaurantController.getRestaurants()) {
            assertWithMessage(restaurant.getRestaurantName()).that(restaurant.isValid()).isTrue();
        }
    }

    @Test
    void testCanAddRestaurant() throws ExceptionClass {
        RestaurantController restaurantController =
                new RestaurantController(new InMemoryRepository<Restaurant>());
        Restaurant addedRestaurant1 = restaurantController.addRestaurant(testRestaurant1);
        ObjectId addedRestaurant1ID = addedRestaurant1.getId();
        Restaurant addedRestaurantInCollection =
                restaurantController.getRestaurant(addedRestaurant1ID);
        assertEquals(testRestaurant1, addedRestaurantInCollection);
        assertEquals(
                testRestaurant1.getRestaurantName(),
                addedRestaurantInCollection.getRestaurantName());
    }

    @Test
    void testCanUpdateRestaurant() throws ExceptionClass {
        RestaurantController restaurantController =
                new RestaurantController(new InMemoryRepository<Restaurant>());
        Restaurant addedRestaurant2 = restaurantController.addRestaurant(testRestaurant2);
        ObjectId addedRestaurant2ID = addedRestaurant2.getId();

        addedRestaurant2.setRestaurantName("Taste of India");
        restaurantController.updateRestaurant(addedRestaurant2);
        assertEquals(addedRestaurant2, restaurantController.getRestaurant(addedRestaurant2ID));
        System.out.println(restaurantController.getRestaurants());
    }

    @Test
    void testCanDeleteRestaurant() throws ExceptionClass {
        RestaurantController restaurantController =
                new RestaurantController(new InMemoryRepository<Restaurant>());
        Restaurant addedRestaurant3 = restaurantController.addRestaurant(testRestaurant3);
        ObjectId addedRestaurant3ID = addedRestaurant3.getId();
        restaurantController.deleteRestaurant(addedRestaurant3ID);
        assertNotEquals(addedRestaurant3ID, restaurantController.getRestaurant(addedRestaurant3ID));
    }
}
