/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.northeastern.cs5500.delivery.controller;

import static com.google.common.truth.Truth.assertThat;
import static com.google.common.truth.Truth.assertWithMessage;

import java.util.HashMap;

import edu.northeastern.cs5500.delivery.model.Restaurant;
import edu.northeastern.cs5500.delivery.repository.InMemoryRepository;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class RestaurantControllerTest {

    @BeforeEach
    public void initiateVariables() {
        Restaurant testRestaurant1 = new Restaurant();
        testRestaurant1.setRestaurantName("Best Calzones!");
        testRestaurant1.setRestaurantDescription("Best taste from Italy!");
        HashMap<String, Double> testRestaurant1Menu = new HashMap<>();
        testRestaurant1Menu.put("Pepperoni Calzone", 11.99);
        testRestaurant1Menu.put("Cheese Spinach Calzone", 10.99);
        testRestaurant1.setRestaurantMenu(testRestaurant1Menu);
        testRestaurant1.setIsActive(true);

        Restaurant testRestaurant2 = new Restaurant();
        testRestaurant2.setRestaurantName("Taj Mahal Indian");
        testRestaurant2.setRestaurantDescription("Best Indian food!");
        HashMap<String, Double> testRestaurant2Menu = new HashMap<>();
        testRestaurant2Menu.put("Vegetarian meal", 11.99);
        testRestaurant2Menu.put("Chicken meal", 12.99);
        testRestaurant2.setRestaurantMenu(testRestaurant2Menu);
        testRestaurant2.setIsActive(true);
    }

    @Test
    void testRegisterCreatesRestaurants() {
        RestaurantController restaurantController = new RestaurantController(new InMemoryRepository<Restaurant>());
        assertThat(restaurantController.getRestaurants()).isNotEmpty();
    }

    @Test
    void testRegisterCreatesValidRestaurants() {
        RestaurantController restaurantController = new RestaurantController(new InMemoryRepository<Restaurant>());

        for (Restaurant restaurant : restaurantController.getRestaurants()) {
            assertWithMessage(restaurant.getTitle()).that(restaurant.isValid()).isTrue();
        }
    }

    @Test
    void testCanAddDelivery() {
        // This test should NOT call register
        // TODO: implement this test.
    }

    @Test
    void testCanReplaceDelivery() {
        // This test should NOT call register
        // TODO: implement this test.
    }

    @Test
    void testCanDeleteDelivery() {
        // This test should NOT call register
        // TODO: implement this test
    }
}
